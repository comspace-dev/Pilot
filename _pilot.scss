// constants needed for calculations.
$base-font-size-px: 16 !default;
$base-spacing-px: 24 !default;
$base-font-size: $base-font-size-px / 16;
$base-spacing: $base-spacing-px / 16;

// strips away the unit if zero
@function stripZero($value) {
	@if $value == "0px" or $value == "0rem" {
		@return 0;
	}
	@else {
		@return $value;
	}
}

// to do

/*
margin
margin-top
margin-right
margin-bottom
margin-left

padding
padding-top
padding-right
padding-bottom
padding-left

border-radius
border-top-right-radius
border-bottom-right-radius
border-bottom-left-radius
border-top-left-radius

height
min-height
max-height

width
min-width
max-width

position

border
border-top
border-right
border-bottom
border-left

font-size (mit line-height)

letter-spacing

text-indent

box-shadow

text-shadow
*/

// all the mixins
@mixin margin($value1, $value2: false, $value3: false, $value4: false) {

	@if $value4 and ($value1 != 0 or $value2 != 0 or $value3 != 0 or $value4 != 0) {
		margin: stripZero($value1 + px) stripZero($value2 + px) stripZero($value3 + px) stripZero($value4 + px);
		margin: stripZero($value1 / 16 + rem) stripZero($value2 / 16 + rem) stripZero($value3 / 16 + rem) stripZero($value4 / 16 + rem);
	}

	@else if $value3 and ($value1 != 0 or $value2 != 0 or $value3 != 0) {
		margin: stripZero($value1 + px) stripZero($value2 + px) stripZero($value3 + px);
		margin: stripZero($value1 / 16 + rem) stripZero($value2 / 16 + rem) stripZero($value3 / 16 + rem);
	}

	@else if $value2 and ($value1 != 0 or $value2 != 0) {
		margin: stripZero($value1 + px) stripZero($value2 + px);
		margin: stripZero($value1 / 16 + rem) stripZero($value2 / 16 + rem);
	}

	@else if $value1 and $value1 != 0 {
		margin: stripZero($value1 + px);
		margin: stripZero($value1 / 16 + rem);
	}
}

@mixin padding($value1, $value2: false, $value3: false, $value4: false) {

	@if $value4 and ($value1 != 0 or $value2 != 0 or $value3 != 0 or $value4 != 0) {
		padding: stripZero($value1 + px) stripZero($value2 + px) stripZero($value3 + px) stripZero($value4 + px);
		padding: stripZero($value1 / 16 + rem) stripZero($value2 / 16 + rem) stripZero($value3 / 16 + rem) stripZero($value4 / 16 + rem);
	}

	@else if $value3 and ($value1 != 0 or $value2 != 0 or $value3 != 0) {
		padding: stripZero($value1 + px) stripZero($value2 + px) stripZero($value3 + px);
		padding: stripZero($value1 / 16 + rem) stripZero($value2 / 16 + rem) stripZero($value3 / 16 + rem);
	}

	@else if $value2 and ($value1 != 0 or $value2 != 0) {
		padding: stripZero($value1 + px) stripZero($value2 + px);
		padding: stripZero($value1 / 16 + rem) stripZero($value2 / 16 + rem);
	}

	@else if $value1 and $value1 != 0 {
		padding: stripZero($value1 + px);
		padding: stripZero($value1 / 16 + rem);
	}
}

@mixin border-radius($value1, $value2: false, $value3: false, $value4: false) {

	@if $value4 and ($value1 != 0 or $value2 != 0 or $value3 != 0 or $value4 != 0) {
		border-radius: stripZero($value1 + px) stripZero($value2 + px) stripZero($value3 + px) stripZero($value4 + px);
		border-radius: stripZero($value1 / 16 + rem) stripZero($value2 / 16 + rem) stripZero($value3 / 16 + rem) stripZero($value4 / 16 + rem);
	}

	@else if $value3 and ($value1 != 0 or $value2 != 0 or $value3 != 0) {
		border-radius: stripZero($value1 + px) stripZero($value2 + px) stripZero($value3 + px);
		border-radius: stripZero($value1 / 16 + rem) stripZero($value2 / 16 + rem) stripZero($value3 / 16 + rem);
	}

	@else if $value2 and ($value1 != 0 or $value2 != 0) {
		border-radius: stripZero($value1 + px) stripZero($value2 + px);
		border-radius: stripZero($value1 / 16 + rem) stripZero($value2 / 16 + rem);
	}

	@else if $value1 and $value1 != 0 {
		border-radius: stripZero($value1 + px);
		border-radius: stripZero($value1 / 16 + rem);
	}
}

// define line-height for a specific font-size based on the base-spacing. accepts: font-size, multiple of base-spacing. defaults: $base-font-size-px, 1.
@mixin font-size($size: $base-font-size-px, $height: 1) {
	font-size: stripZero($size + px);
	font-size: stripZero($size / 16 + rem);
	@if $height == "normal" {
		line-height: normal;
	}
	@else {
		line-height: ceil($base-spacing * $height / $size * 16 * 100000) / 100000;
	}
}

// add four or less values for a specific property. accepts: property, value one. optional: value two, value three, value four. defaults: none.
@mixin shorthand($property, $value1, $value2: false, $value3: false, $value4: false) {
	@if $value4 and ($value1 != 0 or $value2 != 0 or $value3 != 0 or $value4 != 0) {
		#{$property}: stripZero($value1 + px) stripZero($value2 + px) stripZero($value3 + px) stripZero($value4 + px);
		#{$property}: stripZero($value1 / 16 + rem) stripZero($value2 / 16 + rem) stripZero($value3 / 16 + rem) stripZero($value4 / 16 + rem);
	}
	@else if $value3 and ($value1 != 0 or $value2 != 0 or $value3 != 0) {
		#{$property}: stripZero($value1 + px) stripZero($value2 + px) stripZero($value3 + px);
		#{$property}: stripZero($value1 / 16 + rem) stripZero($value2 / 16 + rem) stripZero($value3 / 16 + rem);
	}
	@else if $value2 and ($value1 != 0 or $value2 != 0) {
		#{$property}: stripZero($value1 + px) stripZero($value2 + px);
		#{$property}: stripZero($value1 / 16 + rem) stripZero($value2 / 16 + rem);
	}
	@else if $value1 and $value1 != 0 {
		#{$property}: stripZero($value1 + px);
		#{$property}: stripZero($value1 / 16 + rem);
	}
}

// add leading space or space to a specific side. accepts: value, property, side. defaults: $base-spacing-px, margin.
@mixin leading($value: $base-spacing-px, $property: margin, $side: top) {
	#{$property}-#{$side}: stripZero($value + px);
	#{$property}-#{$side}: stripZero($value / 16 + rem);
}

// add a border to all sides or to a specific side. accepts: value, style. optional: side. defaults: 1px, solid.
@mixin border($value: 1, $style: solid, $side: false) {
	@if not $side {
		border: {
			width: stripZero($value + px);
			width: stripZero($value / 16 + rem);
			style: $style;
		}
	}
	@else {
		border-#{$side}: {
			width: stripZero($value + px);
			width: stripZero($value / 16 + rem);
			style: $style;
		}
	}
}

// add a box-shadow. accepts: horizontal offset, vertical offset, blur, spread, color. optional: inset. defaults: 2px, 2px, 4px, 0, rgba(0, 0, 0, 0.5), false.
@mixin box-shadow($h-off: 2, $v-off: 2, $blur: 4, $spread: 0, $color: rgba(0, 0, 0, 0.5), $inset: false) {
	@if $inset {
		box-shadow: stripZero($h-off + px) stripZero($v-off + px) stripZero($blur + px) stripZero($spread + px) $color inset;
		box-shadow: stripZero($h-off / 16 + rem) stripZero($v-off / 16 + rem) stripZero($blur / 16 + rem) stripZero($spread / 16 + rem) $color inset;
	}
	@else {
		box-shadow: stripZero($h-off + px) stripZero($v-off + px) stripZero($blur + px) stripZero($spread + px) $color;
		box-shadow: stripZero($h-off / 16 + rem) stripZero($v-off / 16 + rem) stripZero($blur / 16 + rem) stripZero($spread / 16 + rem) $color;
	}
}

// add a text-shadow. Accepts: horizontal offset, vertical offset, blur, color. defaults: 1px, 1px, 2px, rgba(0, 0, 0, 0.5).
@mixin text-shadow($h-off: 1, $v-off: 1, $blur: 2, $color: rgba(0, 0, 0, 0.5)) {
	text-shadow: stripZero($h-off + px) stripZero($v-off + px) stripZero($blur + px) $color;
	text-shadow: stripZero($h-off / 16 + rem) stripZero($v-off / 16 + rem) stripZero($blur / 16 + rem) $color;
}

// change the position of an element providing up to four coordinates. accepts: type, coordinates. defaults: none.
@mixin position($type, $coords) {
	$top: nth($coords, 1);
	$right: nth($coords, 2);
	$bottom: nth($coords, 3);
	$left: nth($coords, 4);

	position: $type;
	@if $top {
		@if $top == auto {
			top: $top;
		}
		@else {
			top: stripZero($top + px);
			top: stripZero($top / 16 + rem);
		}
	}
	@if $right {
		@if $right == auto {
			right: $right;
		}
		@else {
			right: stripZero($right + px);
			right: stripZero($right / 16 + rem);
		}
	}
	@if $bottom {
		@if $bottom == auto {
			bottom: $bottom;
		}
		@else {
			bottom: stripZero($bottom + px);
			bottom: stripZero($bottom / 16 + rem);
		}
	}
	@if $left {
		@if $left == auto {
			left: $left;
		}
		@else {
			left: stripZero($left + px);
			left: stripZero($left / 16 + rem);
		}
	}
}